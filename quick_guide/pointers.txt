Here's a summary of pointers in C++, along with multiple examples:

    Pointers:
        A pointer is a variable that holds the memory address of another variable.
        Pointers allow you to manipulate memory directly and perform operations like dynamic memory allocation.

cpp

int main() {
    int number = 5;
    int* pointer = &number;

    std::cout << "Value: " << *pointer << std::endl; // Output: 5
    std::cout << "Address: " << pointer << std::endl; // Output: Memory address

    return 0;
}

    Dynamic Memory Allocation:
        Pointers are commonly used to allocate memory dynamically using the new operator.
        Dynamic memory allocation allows you to create variables or arrays of variables at runtime.

cpp

int main() {
    int* dynamicNumber = new int; // Allocate memory for an integer
    *dynamicNumber = 10;

    std::cout << "Value: " << *dynamicNumber << std::endl; // Output: 10

    delete dynamicNumber; // Free the allocated memory
    return 0;
}

    Pointer Arithmetic:
        Pointers can be incremented or decremented to navigate through contiguous memory locations.
        Pointer arithmetic depends on the data type size.

cpp

int main() {
    int numbers[] = {1, 2, 3, 4, 5};
    int* pointer = numbers;

    std::cout << "First Element: " << *pointer << std::endl; // Output: 1

    pointer++; // Move to the next element
    std::cout << "Second Element: " << *pointer << std::endl; // Output: 2

    return 0;
}

    Pointers and Arrays:
        Arrays are implicitly converted to pointers, pointing to the first element's memory address.
        Pointers can be used to access elements in an array.

cpp

int main() {
    int numbers[] = {1, 2, 3, 4, 5};
    int* pointer = numbers;

    std::cout << "First Element: " << *pointer << std::endl; // Output: 1

    // Accessing elements using pointer arithmetic
    std::cout << "Second Element: " << *(pointer + 1) << std::endl; // Output: 2

    return 0;
}

    Pointers and Functions:
        Pointers are frequently used to pass variables by reference to functions, allowing modification of the original data.

cpp

void increment(int* num) {
    (*num)++;
}

int main() {
    int number = 5;
    increment(&number);

    std::cout << "Number: " << number << std::endl; // Output: 6

    return 0;
}